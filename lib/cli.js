#!/usr/bin/env node
var e=require("path"),t=require("sade"),o=require("./index"),r=t("qunit-coverage");r.version("0.4.0"),r.command("test <file>","",{default:!0}).option("-c, --coverage","Evaulate Istanbul coverage",!0).option("-v, --verbose","Perform additional logging",!0).option("-t, --timeout","Set a timeout to fail the process after",5e3).option("-o, --output","Set an output directory for additional coverage format outputs",".").option("-f, --formats","Output test coverage in different formats").option("-p, --puppeteer-options","Passes options to puppeteer on launch").describe("Runs the QUnit test runner for the given fixture.").example("qunit-coverage test/fixture.html").example("qunit-coverage test/fixture.html -o coverage -f json,html").example("qunit-coverage test test/fixture.html").action(function(t,r){return new Promise(function(n,a){var i=function(){try{return n()}catch(e){return a(e)}},u=function(e){try{return process.exit(1),i()}catch(e){return a(e)}};try{var s,c,p;c=(s=r.formats?r.formats.split(",").filter(function(e){return e}):[]).length&&r.coverage?{output:e.resolve(r.output),formats:s}:r.coverage,p={};try{p=JSON.parse(r.p||"{}")}catch(e){console.log(),console.log(e.message),console.log()}return o(t,{verbose:r.verbose,timeout:r.timeout,coverage:c,puppeteerOptions:p}).then(function(e){try{return process.exit(e.pass?0:1),i()}catch(e){return u()}},u)}catch(e){u()}})}),r.parse(process.argv);
//# sourceMappingURL=cli.js.map
