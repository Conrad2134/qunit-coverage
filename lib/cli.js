#!/usr/bin/env node
var t=require("path"),e=require("sade"),r=require("./index"),o=e("qunit-coverage");o.version("0.4.0"),o.command("test <file>","",{default:!0}).option("-c, --coverage","Evaulate Istanbul coverage",!0).option("-v, --verbose","Perform additional logging",!0).option("-t, --timeout","Set a timeout to fail the process after",5e3).option("-o, --output","Set an output directory for additional coverage format outputs",".").option("-f, --formats","Output test coverage in different formats").describe("Runs the QUnit test runner for the given fixture.").example("qunit-coverage test/fixture.html").example("qunit-coverage test/fixture.html -o coverage -f json,html").example("qunit-coverage test test/fixture.html").action(function(e,o){return new Promise(function(n,a){var i=function(){try{return n()}catch(t){return a(t)}},u=function(t){try{return process.exit(1),i()}catch(t){return a(t)}};try{var s,c;return c=(s=o.formats?o.formats.split(",").filter(function(t){return t}):[]).length&&o.coverage?{output:t.resolve(o.output),formats:s}:o.coverage,r(e,{verbose:o.verbose,timeout:o.timeout,coverage:c}).then(function(t){try{return process.exit(t.pass?0:1),i()}catch(t){return u()}},u)}catch(t){u()}})}),o.parse(process.argv);
//# sourceMappingURL=cli.js.map
