var t=void 0,e=require("path"),r=require("sade"),o=r("qunit-coverage"),i=require("./index");o.version("0.4.0"),o.command("test <file>","",{default:!0}).option("-c, --coverage","Evaulate Istanbul coverage",!0).option("-v, --verbose","Perform additional logging",!0).option("-t, --timeout","Set a timeout to fail the process after",5e3).option("-o, --output","Set an output directory for additional coverage format outputs",".").option("-f, --formats","Output test coverage in different formats").describe("Runs the QUnit test runner for the given fixture.").example("qunit-coverage test/fixture.html").example("qunit-coverage test/fixture.html -o coverage -f json,html").example("qunit-coverage test test/fixture.html").action(function(r,o){return new Promise(function(t,n){var u,a,s,c=function(){try{return t()}catch(t){return n(t)}}.bind(this),f=function(t){try{return process.exit(1),c()}catch(t){return n(t)}}.bind(this);try{return a=(u=o.formats?o.formats.split(",").filter(function(t){return t}):[]).length&&o.coverage?{output:e.resolve(o.output),formats:u}:o.coverage,i(r,{verbose:o.verbose,timeout:o.timeout,coverage:a}).then(function(t){try{return s=t,process.exit(s.pass?0:1),c()}catch(t){return f(t)}}.bind(this),f)}catch(t){f(t)}}.bind(t))}),o.parse(process.argv);
//# sourceMappingURL=cli.js.map
