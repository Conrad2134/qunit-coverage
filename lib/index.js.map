{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["/* global QUnit, window, __coverage__ */\n\nconst chalk = require(\"chalk\");\nconst istanbul = require(\"istanbul\");\nconst path = require(\"path\");\nconst puppeteer = require(\"puppeteer\");\nconst _ = require(\"lodash\");\nconst fs = require(\"fs-extra\");\nconst glob = require(\"glob\");\n\nconst { getBranchCoverage, getFunctionCoverage, getStatementCoverage } = require(\"./coverage-parser\");\n\nconst spreadObjectIf = (condition, element) => (condition ? element : {});\n\nconst defaults = {\n\ttimeout: 20000,\n\tformats: [],\n\toutput: process.cwd(),\n\tpuppeteerOptions: {},\n\tverbose: false,\n};\n\nconst qunitChromeRunner = (\n\tfilePath,\n\t{\n\t\tcoverage = { output: defaults.output, formats: defaults.formats },\n\t\tverbose = defaults.verbose,\n\t\ttimeout = defaults.timeout,\n\t\tpuppeteerOptions = defaults.puppeteerOptions,\n\t} = {},\n) => {\n\tconst fixturePath = `file:///${path.join(path.isAbsolute(filePath) ? \"\" : process.cwd(), filePath).replace(/\\\\/g, \"/\")}`;\n\tconst log = (...val) => {\n\t\tif (verbose) {\n\t\t\tconsole.log(...val);\n\t\t}\n\t};\n\n\t//\toptions:\n\t//\t\ttimeout\n\t//\t\tverbose\n\t//\t\tpuppeteerOptions: { /* options to pass to puppeteer */ }\n\t//\t\t`coverage: { output: \"...\", formats: [\"json\", ...] }` OR `coverage: false`\n\n\treturn new Promise((resolve, reject) => {\n\t\t(async () => {\n\t\t\tconst closeBrowser = async (browser, rejection) => {\n\t\t\t\ttry {\n\t\t\t\t\tbrowser.on(\"disconnected\", () => {\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tconst { pid } = browser.process();\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tprocess.kill(pid);\n\t\t\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\t\t\tif (ex) {\n\t\t\t\t\t\t\t\t\tlog(`Failed to kill process: ${ex}`);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\tif (rejection) {\n\t\t\t\t\t\t\t\t\treject(rejection);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, 100);\n\t\t\t\t\t});\n\n\t\t\t\t\tbrowser.disconnect();\n\t\t\t\t} catch (ex) {\n\t\t\t\t\t// Silently handle, for now.\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tlog(\"Testing\", chalk.magenta(fixturePath));\n\n\t\t\tconst browser = await puppeteer.launch(puppeteerOptions);\n\t\t\tconst page = await browser.newPage();\n\t\t\tconst failures = [];\n\n\t\t\t// Setting our timeout in case everything below takes too long\n\t\t\tconst timer = setTimeout(() => {\n\t\t\t\tlog();\n\t\t\t\tlog(chalk.red(\"Timeout exceeded.\"));\n\t\t\t\tlog();\n\n\t\t\t\tcloseBrowser(browser, new Error(\"Timeout exceeded\"));\n\t\t\t}, timeout || defaults.timeout);\n\n\t\t\ttry {\n\t\t\t\tawait page.exposeFunction(\"logAssertion\", async response => {\n\t\t\t\t\t// Don't log if the test passed or it's a todo test\n\t\t\t\t\tif (!response.result && !response.todo) {\n\t\t\t\t\t\tfailures.push(response);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} catch (ex) {\n\t\t\t\t// Silently handle, for now.\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tawait page.exposeFunction(\"report\", async response => {\n\t\t\t\t\tlet coverageReport = {};\n\n\t\t\t\t\tif (coverage) {\n\t\t\t\t\t\tconst coverageResults = await page.evaluate(() => __coverage__);\n\t\t\t\t\t\tconst collector = new istanbul.Collector();\n\t\t\t\t\t\tconst reporter = new istanbul.Reporter(false, coverage.output || defaults.output);\n\t\t\t\t\t\tconst formats = coverage.formats || defaults.formats;\n\n\t\t\t\t\t\tif (verbose && !formats.includes(\"text-summary\")) {\n\t\t\t\t\t\t\tformats.push(\"text-summary\");\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcoverageReport = Object.assign({}, coverageReport, {\n\t\t\t\t\t\t\tbranch: getBranchCoverage(coverageResults),\n\t\t\t\t\t\t\tfunction: getFunctionCoverage(coverageResults),\n\t\t\t\t\t\t\tstatement: getStatementCoverage(coverageResults),\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tcollector.add(coverageResults);\n\n\t\t\t\t\t\treporter.addAll(formats);\n\t\t\t\t\t\treporter.write(collector, true, () => {\n\t\t\t\t\t\t\tif (!formats.includes(\"text-summary\") || formats.length !== 1) {\n\t\t\t\t\t\t\t\tlog();\n\t\t\t\t\t\t\t\tlog(`Coverage written to ${chalk.magenta(coverage.output)}`);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tlog();\n\n\t\t\t\t\t// Group our failures by module / test\n\t\t\t\t\tconst grouped = _.forIn(_.groupBy(failures, failure => failure.module), (val, key, obj) => {\n\t\t\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\t\t\tobj[key] = _.groupBy(val, failure => failure.name);\n\t\t\t\t\t});\n\n\t\t\t\t\t// Loop through each module\n\t\t\t\t\t_.forIn(grouped, (val, key) => {\n\t\t\t\t\t\tconst hasModule = !!key;\n\n\t\t\t\t\t\tif (hasModule) {\n\t\t\t\t\t\t\tlog(key);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Loop through each test\n\t\t\t\t\t\t_.forIn(val, (tests, name) => {\n\t\t\t\t\t\t\tconst indent = hasModule ? \"  \" : \"\";\n\n\t\t\t\t\t\t\tlog(indent + name);\n\n\t\t\t\t\t\t\t// Print each failure\n\t\t\t\t\t\t\ttests.forEach(({ message, expected, actual }) => {\n\t\t\t\t\t\t\t\tlog(chalk.red(`${indent}  \\u2717 ${message ? `${chalk.gray(message)}` : \"Test failure\"}`));\n\n\t\t\t\t\t\t\t\tif (!_.isUndefined(actual)) {\n\t\t\t\t\t\t\t\t\tlog(`${indent}      expected: ${expected}, actual: ${actual}`);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tlog();\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\t\tlog(chalk.blue(`Took ${response.runtime}ms to run ${response.total} tests. ${response.passed} passed, ${response.failed} failed.`));\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait closeBrowser(browser);\n\n\t\t\t\t\t\t// Get rid of our timeout timer because we're done\n\t\t\t\t\t\tclearTimeout(timer);\n\n\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\tObject.assign(\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\t{ pass: !response.failed, results: _.omit(Object.assign({}, response), \"runtime\") },\n\t\t\t\t\t\t\t\tspreadObjectIf(coverage, {\n\t\t\t\t\t\t\t\t\tcoverage: coverageReport,\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\t// This might happen if the timeout exceeded and we already closed.\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} catch (ex) {\n\t\t\t\t// silently handle, for now\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tpage.on(\"load\", async () => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst qunitMissing = await page.evaluate(() => typeof QUnit === \"undefined\" || !QUnit);\n\n\t\t\t\t\t\tif (qunitMissing) {\n\t\t\t\t\t\t\tlog();\n\t\t\t\t\t\t\tlog(chalk.red(\"Unable to find the QUnit object.\"));\n\t\t\t\t\t\t\tlog();\n\n\t\t\t\t\t\t\tawait closeBrowser(browser, new Error(\"Unable to find the QUnit object\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\t// silently handle, for now\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst fixture = path.join(path.isAbsolute(filePath) ? \"\" : process.cwd(), filePath);\n\t\t\t\t\t\tconst fixtureName = path.basename(fixture, \".html\");\n\t\t\t\t\t\tconst snapshotDir = path.join(path.dirname(fixture), \"__snapshots__\", fixtureName);\n\n\t\t\t\t\t\tawait page.exposeFunction(\"loadSnapshots\", async () => {\n\t\t\t\t\t\t\tawait fs.ensureDir(snapshotDir);\n\n\t\t\t\t\t\t\tconst files = glob.sync(path.join(snapshotDir, \"*.snap\"));\n\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturn files.reduce((allSnapshots, file) => {\n\t\t\t\t\t\t\t\t\tconst snapshots = require(file) || {};\n\t\t\t\t\t\t\t\t\tconst scope = path.basename(file, \".snap\");\n\n\t\t\t\t\t\t\t\t\tconst scoped = Object.entries(snapshots).reduce((existing, [key, value]) => {\n\t\t\t\t\t\t\t\t\t\treturn _.extend({}, existing, { [scope + \".\" + key]: value.trim() });\n\t\t\t\t\t\t\t\t\t}, {});\n\n\t\t\t\t\t\t\t\t\treturn _.extend({}, allSnapshots, scoped);\n\t\t\t\t\t\t\t\t}, {});\n\t\t\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\t\t\t// TODO: Since this is an experimental feature, still need to figure out logging / error handling.\n\t\t\t\t\t\t\t\tconsole.error(ex);\n\t\t\t\t\t\t\t\treturn {};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tawait page.exposeFunction(\"setSnapshot\", async (scope, id, snapshot) => {\n\t\t\t\t\t\t\tawait fs.ensureDir(snapshotDir);\n\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tconst file = path.join(snapshotDir, scope + \".snap\");\n\t\t\t\t\t\t\t\tconst existing = fs.existsSync(file) ? require(file) : { exports: {} };\n\t\t\t\t\t\t\t\tconst snapshotFile = { exports: _.extend({}, existing.exports, { [id]: snapshot }) };\n\n\t\t\t\t\t\t\t\tconst str = Object.entries(snapshotFile.exports).reduce((fileStr, [key, value]) => {\n\t\t\t\t\t\t\t\t\treturn fileStr + \"module.exports[`\" + key + \"`] = `\\n\" + value + \"\\n`;\\n\\n\";\n\t\t\t\t\t\t\t\t}, \"\");\n\n\t\t\t\t\t\t\t\tawait fs.writeFile(file, str);\n\t\t\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\t\t\t// TODO: Since this is an experimental feature, still need to figure out logging / error handling.\n\t\t\t\t\t\t\t\tconsole.error(ex);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tawait page.evaluate(async () => {\n\t\t\t\t\t\t\tconst storage = await window.loadSnapshots();\n\n\t\t\t\t\t\t\twindow.__snapshots__ = {\n\t\t\t\t\t\t\t\tstorage,\n\t\t\t\t\t\t\t\tget(scope, id) {\n\t\t\t\t\t\t\t\t\treturn window.__snapshots__.storage[scope + \".\" + id];\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tasync set(scope, id, snapshot) {\n\t\t\t\t\t\t\t\t\tsnapshot = snapshot.trim();\n\n\t\t\t\t\t\t\t\t\twindow.__snapshots__.storage[scope + \".\" + id] = snapshot;\n\t\t\t\t\t\t\t\t\tawait window.setSnapshot(scope, id, snapshot);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tQUnit.done(window.report);\n\t\t\t\t\t\t\tQUnit.log(window.logAssertion);\n\t\t\t\t\t\t\tQUnit.start();\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\t// silently handle, for now.\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} catch (ex) {\n\t\t\t\t// silently handle, for now\n\t\t\t}\n\n\t\t\t// Navigate to our test file\n\t\t\ttry {\n\t\t\t\tawait page.goto(fixturePath);\n\t\t\t} catch (ex) {\n\t\t\t\tlog();\n\t\t\t\tlog(chalk.red(\"Failed to open the test file.\"));\n\t\t\t\tlog();\n\n\t\t\t\tawait closeBrowser(browser, new Error(\"Failed to open the test file.\"));\n\t\t\t}\n\t\t})();\n\t});\n};\n\nmodule.exports = qunitChromeRunner;\n"],"names":["const","chalk","require","istanbul","path","puppeteer","_","fs","glob","spreadObjectIf","condition","element","defaults","timeout","formats","output","process","cwd","puppeteerOptions","verbose","module","exports","filePath","ref","fixturePath","join","isAbsolute","replace","log","console","val","Promise","resolve","reject","closeBrowser","browser","rejection","on","setTimeout","kill","pid","ex","disconnect","magenta","launch","then","$await_14","newPage","page","$await_15","failures","timer","red","Error","fixture","fixtureName","basename","snapshotDir","dirname","exposeFunction","ensureDir","files","sync","reduce","allSnapshots","file","snapshots","scope","scoped","Object","entries","existing","extend","trim","error","id","snapshot","existsSync","snapshotFile","str","fileStr","writeFile","evaluate","window","loadSnapshots","__snapshots__","$await_21","get","storage","set","setSnapshot","QUnit","done","report","logAssertion","start","$await_24","goto","response","coverageReport","coverage","__coverage__","coverageResults","$await_28","collector","Collector","reporter","Reporter","includes","push","assign","branch","getBranchCoverage","function","getFunctionCoverage","statement","getStatementCoverage","add","addAll","write","length","grouped","forIn","groupBy","failure","key","obj","name","hasModule","tests","indent","forEach","message","gray","isUndefined","actual","expected","blue","clearTimeout","pass","failed","results","omit","result","todo"],"mappings":"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"}