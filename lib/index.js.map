{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["/* global QUnit, window, __coverage__ */\n\nconst chalk = require(\"chalk\");\nconst istanbul = require(\"istanbul\");\nconst path = require(\"path\");\nconst puppeteer = require(\"puppeteer\");\nconst _ = require(\"lodash\");\n\nconst { getBranchCoverage, getFunctionCoverage, getStatementCoverage } = require(\"./coverage-parser\");\n\nconst spreadObjectIf = (condition, element) => (condition ? element : {});\n\nconst defaults = {\n\ttimeout: 10000,\n\tformats: [],\n\toutput: process.cwd(),\n\tpuppeteerOptions: {},\n\tverbose: false,\n};\n\nconst qunitChromeRunner = (\n\tfilePath,\n\t{\n\t\tcoverage = { output: defaults.output, formats: defaults.formats },\n\t\tverbose = defaults.verbose,\n\t\ttimeout = defaults.timeout,\n\t\tpuppeteerOptions = defaults.puppeteerOptions,\n\t} = {}\n) => {\n\tconst fixturePath = `file:///${path.join(path.isAbsolute(filePath) ? \"\" : process.cwd(), filePath).replace(/\\\\/g, \"/\")}`;\n\tconst log = (...val) => {\n\t\tif (verbose) {\n\t\t\tconsole.log(...val);\n\t\t}\n\t};\n\n\t//\toptions:\n\t//\t\ttimeout\n\t//\t\tverbose\n\t//\t\tpuppeteerOptions: { /* options to pass to puppeteer */ }\n\t//\t\t`coverage: { output: \"...\", formats: [\"json\", ...] }` OR `coverage: false`\n\n\treturn new Promise((resolve, reject) => {\n\t\t(async () => {\n\t\t\tconst closeBrowser = async (browser, rejection) => {\n\t\t\t\ttry {\n\t\t\t\t\tawait browser.close();\n\t\t\t\t} catch (ex) {\n\t\t\t\t\tlog();\n\t\t\t\t\tlog(chalk.yellow(\"Failed to close Chromium.\"));\n\t\t\t\t\tlog();\n\t\t\t\t} finally {\n\t\t\t\t\tif (rejection) {\n\t\t\t\t\t\treject(rejection);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tlog(\"Testing\", chalk.magenta(fixturePath));\n\n\t\t\tconst browser = await puppeteer.launch(puppeteerOptions);\n\t\t\tconst page = await browser.newPage();\n\t\t\tconst failures = [];\n\n\t\t\t// Setting our timeout in case everything below takes too long\n\t\t\tconst timer = setTimeout(() => {\n\t\t\t\tlog();\n\t\t\t\tlog(chalk.red(\"Timeout exceeded.\"));\n\t\t\t\tlog();\n\n\t\t\t\tcloseBrowser(browser, new Error(\"Timeout exceeded\"));\n\t\t\t}, timeout || defaults.timeout);\n\n\t\t\ttry {\n\t\t\t\tawait page.exposeFunction(\"logAssertion\", async response => {\n\t\t\t\t\t// Don't log if the test passed or it's a todo test\n\t\t\t\t\tif (!response.result && !response.todo) {\n\t\t\t\t\t\tfailures.push(response);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} catch (ex) {\n\t\t\t\t// Silently handle, for now.\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tawait page.exposeFunction(\"report\", async response => {\n\t\t\t\t\tlet coverageReport = {};\n\n\t\t\t\t\tif (coverage) {\n\t\t\t\t\t\tconst coverageResults = await page.evaluate(() => __coverage__);\n\t\t\t\t\t\tconst collector = new istanbul.Collector();\n\t\t\t\t\t\tconst reporter = new istanbul.Reporter(false, coverage.output || defaults.output);\n\t\t\t\t\t\tconst formats = coverage.formats || defaults.formats;\n\n\t\t\t\t\t\tif (verbose && !formats.includes(\"text-summary\")) {\n\t\t\t\t\t\t\tformats.push(\"text-summary\");\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcoverageReport = Object.assign({}, coverageReport, {\n\t\t\t\t\t\t\tbranch: getBranchCoverage(coverageResults),\n\t\t\t\t\t\t\tfunction: getFunctionCoverage(coverageResults),\n\t\t\t\t\t\t\tstatement: getStatementCoverage(coverageResults),\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tcollector.add(coverageResults);\n\n\t\t\t\t\t\treporter.addAll(formats);\n\t\t\t\t\t\treporter.write(collector, true, () => {\n\t\t\t\t\t\t\tif (!formats.includes(\"text-summary\") || formats.length !== 1) {\n\t\t\t\t\t\t\t\tlog();\n\t\t\t\t\t\t\t\tlog(`Coverage written to ${chalk.magenta(coverage.output)}`);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tlog();\n\n\t\t\t\t\t// Group our failures by module / test\n\t\t\t\t\tconst grouped = _.forIn(_.groupBy(failures, failure => failure.module), (val, key, obj) => {\n\t\t\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\t\t\tobj[key] = _.groupBy(val, failure => failure.name);\n\t\t\t\t\t});\n\n\t\t\t\t\t// Loop through each module\n\t\t\t\t\t_.forIn(grouped, (val, key) => {\n\t\t\t\t\t\tconst hasModule = !!key;\n\n\t\t\t\t\t\tif (hasModule) {\n\t\t\t\t\t\t\tlog(key);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Loop through each test\n\t\t\t\t\t\t_.forIn(val, (tests, name) => {\n\t\t\t\t\t\t\tconst indent = hasModule ? \"  \" : \"\";\n\n\t\t\t\t\t\t\tlog(indent + name);\n\n\t\t\t\t\t\t\t// Print each failure\n\t\t\t\t\t\t\ttests.forEach(({ message, expected, actual }) => {\n\t\t\t\t\t\t\t\tlog(chalk.red(`${indent}  \\u2717 ${message ? `${chalk.gray(message)}` : \"Test failure\"}`));\n\n\t\t\t\t\t\t\t\tif (!_.isUndefined(actual)) {\n\t\t\t\t\t\t\t\t\tlog(`${indent}      expected: ${expected}, actual: ${actual}`);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tlog();\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\t\tlog(chalk.blue(`Took ${response.runtime}ms to run ${response.total} tests. ${response.passed} passed, ${response.failed} failed.`));\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait closeBrowser(browser);\n\n\t\t\t\t\t\t// Get rid of our timeout timer because we're done\n\t\t\t\t\t\tclearTimeout(timer);\n\n\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\tObject.assign(\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\t{ pass: !response.failed, results: _.omit(Object.assign({}, response), \"runtime\") },\n\t\t\t\t\t\t\t\tspreadObjectIf(coverage, {\n\t\t\t\t\t\t\t\t\tcoverage: coverageReport,\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\t// This might happen if the timeout exceeded and we already closed.\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} catch (ex) {\n\t\t\t\t// silently handle, for now\n\t\t\t}\n\n\t\t\tpage.on(\"load\", async () => {\n\t\t\t\ttry {\n\t\t\t\t\tconst qunitMissing = await page.evaluate(() => typeof QUnit === \"undefined\" || !QUnit);\n\n\t\t\t\t\tif (qunitMissing) {\n\t\t\t\t\t\tlog();\n\t\t\t\t\t\tlog(chalk.red(\"Unable to find the QUnit object.\"));\n\t\t\t\t\t\tlog();\n\n\t\t\t\t\t\tawait closeBrowser(browser, new Error(\"Unable to find the QUnit object\"));\n\t\t\t\t\t}\n\t\t\t\t} catch (ex) {\n\t\t\t\t\t// silently handle, for now\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tawait page.evaluate(() => {\n\t\t\t\t\t\tQUnit.done(window.report);\n\t\t\t\t\t\tQUnit.log(window.logAssertion);\n\t\t\t\t\t\tQUnit.start();\n\t\t\t\t\t});\n\t\t\t\t} catch (ex) {\n\t\t\t\t\t// silently handle, for now.\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Navigate to our test file\n\t\t\ttry {\n\t\t\t\tawait page.goto(fixturePath);\n\t\t\t} catch (ex) {\n\t\t\t\tlog();\n\t\t\t\tlog(chalk.red(\"Failed to open the test file.\"));\n\t\t\t\tlog();\n\n\t\t\t\tawait closeBrowser(browser, new Error(\"Failed to open the test file.\"));\n\t\t\t}\n\t\t})();\n\t});\n};\n\nmodule.exports = qunitChromeRunner;\n"],"names":["const","chalk","require","istanbul","path","puppeteer","_","spreadObjectIf","condition","element","defaults","timeout","formats","output","process","cwd","puppeteerOptions","verbose","module","exports","filePath","ref","fixturePath","join","isAbsolute","replace","log","console","val","Promise","resolve","reject","closeBrowser","browser","rejection","ex","yellow","close","then","magenta","launch","$await_11","newPage","page","$await_12","failures","timer","setTimeout","red","Error","on","evaluate","QUnit","done","window","report","logAssertion","start","$await_14","goto","exposeFunction","response","coverageReport","coverage","__coverage__","coverageResults","$await_18","collector","Collector","reporter","Reporter","includes","push","Object","assign","branch","getBranchCoverage","function","getFunctionCoverage","statement","getStatementCoverage","add","addAll","write","length","grouped","forIn","groupBy","failure","key","obj","name","hasModule","tests","indent","forEach","message","gray","isUndefined","actual","expected","blue","clearTimeout","pass","failed","results","omit","result","todo"],"mappings":"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"}