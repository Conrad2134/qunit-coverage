{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["/* global QUnit, window, __coverage__ */\n\nconst chalk = require(\"chalk\");\nconst istanbul = require(\"istanbul\");\nconst path = require(\"path\");\nconst puppeteer = require(\"puppeteer\");\nconst _ = require(\"lodash\");\nconst fs = require(\"fs-extra\");\nconst glob = require(\"glob\");\n\nconst { getBranchCoverage, getFunctionCoverage, getStatementCoverage } = require(\"./coverage-parser\");\n\nconst spreadObjectIf = (condition, element) => (condition ? element : {});\n\nconst defaults = {\n\ttimeout: 20000,\n\tformats: [],\n\toutput: process.cwd(),\n\tpuppeteerOptions: {},\n\tverbose: false,\n};\n\nconst qunitChromeRunner = (\n\tfilePath,\n\t{\n\t\tcoverage = { output: defaults.output, formats: defaults.formats },\n\t\tverbose = defaults.verbose,\n\t\ttimeout = defaults.timeout,\n\t\tpuppeteerOptions = defaults.puppeteerOptions,\n\t} = {},\n) => {\n\tconst fixturePath = `file:///${path.join(path.isAbsolute(filePath) ? \"\" : process.cwd(), filePath).replace(/\\\\/g, \"/\")}`;\n\tconst fixture = path.join(path.isAbsolute(filePath) ? \"\" : process.cwd(), filePath);\n\tconst fixtureName = path.basename(fixture, \".html\");\n\tconst snapshotDir = path.join(path.dirname(fixture), \"__snapshots__\", fixtureName);\n\n\tconst log = (...val) => {\n\t\tif (verbose) {\n\t\t\tconsole.log(...val);\n\t\t}\n\t};\n\n\t//\toptions:\n\t//\t\ttimeout\n\t//\t\tverbose\n\t//\t\tpuppeteerOptions: { /* options to pass to puppeteer */ }\n\t//\t\t`coverage: { output: \"...\", formats: [\"json\", ...] }` OR `coverage: false`\n\n\treturn new Promise((resolve, reject) => {\n\t\t(async () => {\n\t\t\tconst closeBrowser = async (browser, rejection) => {\n\t\t\t\ttry {\n\t\t\t\t\tbrowser.on(\"disconnected\", () => {\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tconst { pid } = browser.process();\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tprocess.kill(pid);\n\t\t\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\t\t\tif (ex) {\n\t\t\t\t\t\t\t\t\tlog(`Failed to kill process: ${ex}`);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\tif (rejection) {\n\t\t\t\t\t\t\t\t\treject(rejection);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, 100);\n\t\t\t\t\t});\n\n\t\t\t\t\tbrowser.disconnect();\n\t\t\t\t} catch (ex) {\n\t\t\t\t\t// Silently handle, for now.\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tlog(\"Testing\", chalk.magenta(fixturePath));\n\n\t\t\tconst browser = await puppeteer.launch(puppeteerOptions);\n\t\t\tconst page = await browser.newPage();\n\t\t\tconst failures = [];\n\n\t\t\t// Setting our timeout in case everything below takes too long\n\t\t\tconst timer = setTimeout(() => {\n\t\t\t\tlog();\n\t\t\t\tlog(chalk.red(\"Timeout exceeded.\"));\n\t\t\t\tlog();\n\n\t\t\t\tcloseBrowser(browser, new Error(\"Timeout exceeded\"));\n\t\t\t}, timeout || defaults.timeout);\n\n\t\t\ttry {\n\t\t\t\tawait page.exposeFunction(\"logAssertion\", async response => {\n\t\t\t\t\t// Don't log if the test passed or it's a todo test\n\t\t\t\t\tif (!response.result && !response.todo) {\n\t\t\t\t\t\tfailures.push(response);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} catch (ex) {\n\t\t\t\t// Silently handle, for now.\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst saveSnapshots = snapshots => {\n\t\t\t\t\tfs.ensureDirSync(snapshotDir);\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tObject.entries(snapshots).forEach(([scope, snaps]) => {\n\t\t\t\t\t\t\tconst file = path.join(snapshotDir, scope + \".snap\");\n\t\t\t\t\t\t\tconst existing = fs.existsSync(file) ? require(file) : {};\n\t\t\t\t\t\t\tconst snapshotFile = _.extend({}, existing, snaps);\n\n\t\t\t\t\t\t\tconst str = Object.entries(snapshotFile).reduce((fileStr, [key, value]) => {\n\t\t\t\t\t\t\t\treturn fileStr + \"module.exports[`\" + key + \"`] = `\\n\" + value.trim() + \"\\n`;\\n\\n\";\n\t\t\t\t\t\t\t}, \"\");\n\n\t\t\t\t\t\t\tfs.writeFileSync(file, str);\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\t// TODO: Since this is an experimental feature, still need to figure out logging / error handling.\n\t\t\t\t\t\tconsole.error(ex);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tawait page.exposeFunction(\"report\", async (snapshots, response) => {\n\t\t\t\t\tlet coverageReport = {};\n\n\t\t\t\t\tif (snapshots) {\n\t\t\t\t\t\tsaveSnapshots(snapshots);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (coverage) {\n\t\t\t\t\t\tconst coverageResults = await page.evaluate(() => __coverage__);\n\t\t\t\t\t\tconst collector = new istanbul.Collector();\n\t\t\t\t\t\tconst reporter = new istanbul.Reporter(false, coverage.output || defaults.output);\n\t\t\t\t\t\tconst formats = coverage.formats || defaults.formats;\n\n\t\t\t\t\t\tif (verbose && !formats.includes(\"text-summary\")) {\n\t\t\t\t\t\t\tformats.push(\"text-summary\");\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcoverageReport = Object.assign({}, coverageReport, {\n\t\t\t\t\t\t\tbranch: getBranchCoverage(coverageResults),\n\t\t\t\t\t\t\tfunction: getFunctionCoverage(coverageResults),\n\t\t\t\t\t\t\tstatement: getStatementCoverage(coverageResults),\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tcollector.add(coverageResults);\n\n\t\t\t\t\t\treporter.addAll(formats);\n\t\t\t\t\t\treporter.write(collector, true, () => {\n\t\t\t\t\t\t\tif (!formats.includes(\"text-summary\") || formats.length !== 1) {\n\t\t\t\t\t\t\t\tlog();\n\t\t\t\t\t\t\t\tlog(`Coverage written to ${chalk.magenta(coverage.output)}`);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tlog();\n\n\t\t\t\t\t// Group our failures by module / test\n\t\t\t\t\tconst grouped = _.forIn(_.groupBy(failures, failure => failure.module), (val, key, obj) => {\n\t\t\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\t\t\tobj[key] = _.groupBy(val, failure => failure.name);\n\t\t\t\t\t});\n\n\t\t\t\t\t// Loop through each module\n\t\t\t\t\t_.forIn(grouped, (val, key) => {\n\t\t\t\t\t\tconst hasModule = !!key;\n\n\t\t\t\t\t\tif (hasModule) {\n\t\t\t\t\t\t\tlog(key);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Loop through each test\n\t\t\t\t\t\t_.forIn(val, (tests, name) => {\n\t\t\t\t\t\t\tconst indent = hasModule ? \"  \" : \"\";\n\n\t\t\t\t\t\t\tlog(indent + name);\n\n\t\t\t\t\t\t\t// Print each failure\n\t\t\t\t\t\t\ttests.forEach(({ message, expected, actual }) => {\n\t\t\t\t\t\t\t\tlog(chalk.red(`${indent}  \\u2717 ${message ? `${chalk.gray(message)}` : \"Test failure\"}`));\n\n\t\t\t\t\t\t\t\tif (!_.isUndefined(actual)) {\n\t\t\t\t\t\t\t\t\tlog(`${indent}      expected: ${expected}, actual: ${actual}`);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tlog();\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\t\tlog(chalk.blue(`Took ${response.runtime}ms to run ${response.total} tests. ${response.passed} passed, ${response.failed} failed.`));\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait closeBrowser(browser);\n\n\t\t\t\t\t\t// Get rid of our timeout timer because we're done\n\t\t\t\t\t\tclearTimeout(timer);\n\n\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\tObject.assign(\n\t\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\t\t{ pass: !response.failed, results: _.omit(Object.assign({}, response), \"runtime\") },\n\t\t\t\t\t\t\t\tspreadObjectIf(coverage, {\n\t\t\t\t\t\t\t\t\tcoverage: coverageReport,\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\t// This might happen if the timeout exceeded and we already closed.\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} catch (ex) {\n\t\t\t\t// silently handle, for now\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tpage.on(\"load\", async () => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst qunitMissing = await page.evaluate(() => typeof QUnit === \"undefined\" || !QUnit);\n\n\t\t\t\t\t\tif (qunitMissing) {\n\t\t\t\t\t\t\tlog();\n\t\t\t\t\t\t\tlog(chalk.red(\"Unable to find the QUnit object.\"));\n\t\t\t\t\t\t\tlog();\n\n\t\t\t\t\t\t\tawait closeBrowser(browser, new Error(\"Unable to find the QUnit object\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\t// silently handle, for now\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait page.exposeFunction(\"loadSnapshots\", async () => {\n\t\t\t\t\t\t\tawait fs.ensureDir(snapshotDir);\n\n\t\t\t\t\t\t\tconst files = glob.sync(path.join(snapshotDir, \"*.snap\"));\n\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturn files.reduce((allSnapshots, file) => {\n\t\t\t\t\t\t\t\t\tconst snapshots = require(file) || {};\n\t\t\t\t\t\t\t\t\tconst scope = path.basename(file, \".snap\");\n\n\t\t\t\t\t\t\t\t\tconst scoped = Object.entries(snapshots).reduce((existing, [key, value]) => {\n\t\t\t\t\t\t\t\t\t\treturn _.extend({}, existing, { [key]: value.trim() });\n\t\t\t\t\t\t\t\t\t}, {});\n\n\t\t\t\t\t\t\t\t\treturn _.extend({}, allSnapshots, { [scope]: scoped });\n\t\t\t\t\t\t\t\t}, {});\n\t\t\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\t\t\t// TODO: Since this is an experimental feature, still need to figure out logging / error handling.\n\t\t\t\t\t\t\t\tconsole.error(ex);\n\t\t\t\t\t\t\t\treturn {};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tawait page.evaluate(async () => {\n\t\t\t\t\t\t\tconst storage = await window.loadSnapshots();\n\n\t\t\t\t\t\t\twindow.__snapshots__ = {\n\t\t\t\t\t\t\t\tstorage,\n\t\t\t\t\t\t\t\tget(scope, id) {\n\t\t\t\t\t\t\t\t\tconst scoped = window.__snapshots__.storage[scope] || {};\n\n\t\t\t\t\t\t\t\t\treturn scoped[id];\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tasync set(scope, id, snapshot) {\n\t\t\t\t\t\t\t\t\tsnapshot = snapshot.trim();\n\t\t\t\t\t\t\t\t\tconst group = window.__snapshots__.storage[scope];\n\t\t\t\t\t\t\t\t\tconst scoped = Object.assign({}, group, { [id]: snapshot });\n\n\t\t\t\t\t\t\t\t\twindow.__snapshots__.storage[scope] = scoped;\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tQUnit.done(response => window.report(window.__snapshots__.storage, response));\n\t\t\t\t\t\t\tQUnit.log(window.logAssertion);\n\t\t\t\t\t\t\tQUnit.start();\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\t// silently handle, for now.\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} catch (ex) {\n\t\t\t\t// silently handle, for now\n\t\t\t}\n\n\t\t\t// Navigate to our test file\n\t\t\ttry {\n\t\t\t\tawait page.goto(fixturePath);\n\t\t\t} catch (ex) {\n\t\t\t\tlog();\n\t\t\t\tlog(chalk.red(\"Failed to open the test file.\"));\n\t\t\t\tlog();\n\n\t\t\t\tawait closeBrowser(browser, new Error(\"Failed to open the test file.\"));\n\t\t\t}\n\t\t})();\n\t});\n};\n\nmodule.exports = qunitChromeRunner;\n"],"names":["const","chalk","require","istanbul","path","puppeteer","_","fs","glob","spreadObjectIf","condition","element","defaults","timeout","formats","output","process","cwd","puppeteerOptions","verbose","module","exports","filePath","ref","fixturePath","join","isAbsolute","replace","fixture","fixtureName","basename","snapshotDir","dirname","log","console","val","Promise","resolve","reject","closeBrowser","browser","rejection","on","setTimeout","kill","pid","ex","disconnect","magenta","launch","then","$await_14","newPage","page","$await_15","failures","timer","red","Error","exposeFunction","ensureDir","files","sync","reduce","allSnapshots","file","snapshots","scope","scoped","Object","entries","existing","extend","trim","error","evaluate","window","loadSnapshots","__snapshots__","$await_18","get","id","storage","set","snapshot","group","assign","QUnit","done","response","report","logAssertion","start","$await_20","goto","saveSnapshots","ensureDirSync","forEach","existsSync","snapshotFile","snaps","str","fileStr","writeFileSync","coverageReport","coverage","__coverage__","coverageResults","$await_24","collector","Collector","reporter","Reporter","includes","push","branch","getBranchCoverage","function","getFunctionCoverage","statement","getStatementCoverage","add","addAll","write","length","grouped","forIn","groupBy","failure","key","obj","name","hasModule","tests","indent","message","gray","isUndefined","actual","expected","blue","clearTimeout","pass","failed","results","omit","result","todo"],"mappings":"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"}