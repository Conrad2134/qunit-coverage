{"version":3,"file":"cli.js","sources":["../src/cli.js"],"sourcesContent":["#!/usr/bin/env node\n\nconst path = require(\"path\");\nconst sade = require(\"sade\");\nconst qunit = require(\"./index\");\n\nconst program = sade(\"qunit-coverage\");\n\nprogram.version(\"0.4.0\"); // TODO: How to keep this up to date?\n\nprogram\n\t.command(\"test <file>\", \"\", { default: true })\n\t.option(\"-c, --coverage\", \"Evaulate Istanbul coverage\", true)\n\t.option(\"-v, --verbose\", \"Perform additional logging\", true)\n\t.option(\"-t, --timeout\", \"Set a timeout to fail the process after\", 5000)\n\t.option(\n\t\t\"-o, --output\",\n\t\t\"Set an output directory for additional coverage format outputs\",\n\t\t\".\",\n\t)\n\t.option(\"-f, --formats\", \"Output test coverage in different formats\")\n\t.describe(\"Runs the QUnit test runner for the given fixture.\")\n\t.example(\"qunit-coverage test/fixture.html\")\n\t.example(\"qunit-coverage test/fixture.html -o coverage -f json,html\")\n\t.example(\"qunit-coverage test test/fixture.html\")\n\t.action(async (file, options) => {\n\t\ttry {\n\t\t\tconst formats = options.formats\n\t\t\t\t? options.formats.split(\",\").filter(format => format)\n\t\t\t\t: [];\n\t\t\tconst coverage =\n\t\t\t\tformats.length && options.coverage\n\t\t\t\t\t? { output: path.resolve(options.output), formats }\n\t\t\t\t\t: options.coverage;\n\n\t\t\tconst results = await qunit(file, {\n\t\t\t\tverbose: options.verbose,\n\t\t\t\ttimeout: options.timeout,\n\t\t\t\tcoverage,\n\t\t\t});\n\n\t\t\tprocess.exit(results.pass ? 0 : 1);\n\t\t} catch (ex) {\n\t\t\t// TODO: Log the exception?\n\t\t\tprocess.exit(1);\n\t\t}\n\t});\n\nprogram.parse(process.argv);\n"],"names":["const","path","require","sade","qunit","program","version","command","default","option","describe","example","action","file","options","ex","process","exit","coverage","formats","split","filter","format","length","output","resolve","verbose","timeout","then","$await_2","pass","parse","argv"],"mappings":";AAEAA,IAAMC,EAAOC,QAAQ,QACfC,EAAOD,QAAQ,QACfE,EAAQF,QAAQ,WAEhBG,EAAUF,EAAK,kBAErBE,EAAQC,QAAQ,SAEhBD,EACEE,QAAQ,cAAe,IAAMC,SAAS,IACtCC,OAAO,iBAAkB,8BAA8B,GACvDA,OAAO,gBAAiB,8BAA8B,GACtDA,OAAO,gBAAiB,0CAA2C,KACnEA,OACA,eACA,iEACA,KAEAA,OAAO,gBAAiB,6CACxBC,SAAS,qDACTC,QAAQ,oCACRA,QAAQ,6DACRA,QAAQ,yCACRC,gBAAcC,EAAMC,sGAiBXC,cAERC,QAAQC,KAAK,8BAlBd,YASiB,OALVC,GAHAC,EAAUL,EAAQK,QACrBL,EAAQK,QAAQC,MAAM,KAAKC,gBAAOC,UAAUA,QAGtCC,QAAUT,EAAQI,UACrBM,OAAQvB,EAAKwB,QAAQX,EAAQU,gBAASL,GACxCL,EAAQI,SAEUd,EAAMS,GAC3Ba,QAASZ,EAAQY,QACjBC,QAASb,EAAQa,iBACjBT,IAHeU,4BAMhBZ,QAAQC,KANQY,EAMKC,KAAO,EAAI,sCACxBf,YAMXV,EAAQ0B,MAAMf,QAAQgB"}