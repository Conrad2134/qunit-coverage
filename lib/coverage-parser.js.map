{"version":3,"file":"coverage-parser.js","sources":["../src/coverage-parser.js"],"sourcesContent":["const _ = require(\"lodash\");\r\nconst $ = require(\"lodash/fp\");\r\n\r\nconst calculatePercentage = (covered, total) => {\r\n\tconst percentage = _.round(covered / total / 0.01, 2);\r\n\r\n\treturn _.isNaN(percentage) ? 0 : percentage;\r\n};\r\n\r\nconst getCoverage = (type, coverage) => {\r\n\tconst results = _.chain(coverage)\r\n\t\t.values()\r\n\t\t.map($.property(type))\r\n\t\t.map(_.values)\r\n\t\t.flattenDeep()\r\n\t\t.reduce((result, coverageType) => ({ total: ++result.total, covered: coverageType ? ++result.covered : result.covered }), { total: 0, covered: 0 }) // eslint-disable-line no-param-reassign\r\n\t\t.value();\r\n\r\n\treturn calculatePercentage(results.covered, results.total);\r\n};\r\n\r\nconst getBranchCoverage = coverage => getCoverage(\"b\", coverage);\r\nconst getFunctionCoverage = coverage => getCoverage(\"f\", coverage);\r\nconst getStatementCoverage = coverage => getCoverage(\"s\", coverage);\r\n\r\nmodule.exports = {\r\n\tgetBranchCoverage,\r\n\tgetFunctionCoverage,\r\n\tgetStatementCoverage\r\n};\r\n"],"names":["const","_","require","$","getCoverage","type","coverage","percentage","results","chain","values","map","property","flattenDeep","reduce","result","coverageType","total","covered","value","round","isNaN","module","exports"],"mappings":"AAAAA,IAAMC,EAAIC,QAAQ,UACZC,EAAID,QAAQ,aAQZE,WAAeC,EAAMC,GAC1BN,IANMO,EAMAC,EAAUP,EAAEQ,MAAMH,GACtBI,SACAC,IAAIR,EAAES,SAASP,IACfM,IAAIV,EAAES,QACNG,cACAC,gBAAQC,EAAQC,UAAoBC,QAASF,EAAOE,MAAOC,QAASF,IAAiBD,EAAOG,QAAUH,EAAOG,WAAcD,MAAO,EAAGC,QAAS,IAC9IC,QAEF,OAdMZ,EAAaN,EAAEmB,MAcMZ,EAAQU,QAASV,EAAQS,MAdP,IAAM,GAE5ChB,EAAEoB,MAAMd,GAAc,EAAIA,GAmBlCe,OAAOC,oCAJmBjB,UAAYF,EAAY,IAAKE,iCAC3BA,UAAYF,EAAY,IAAKE,kCAC5BA,UAAYF,EAAY,IAAKE"}